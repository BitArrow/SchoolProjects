//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace WUAClient.DailyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionDTO", Namespace="http://schemas.datacontract.org/2004/07/BLL.DTO")]
    public partial class QuestionDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private bool PublishedField;
        
        private System.Guid QuestionIdField;
        
        private string TitleField;
        
        private bool VisibleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Published {
            get {
                return this.PublishedField;
            }
            set {
                if ((this.PublishedField.Equals(value) != true)) {
                    this.PublishedField = value;
                    this.RaisePropertyChanged("Published");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Visible {
            get {
                return this.VisibleField;
            }
            set {
                if ((this.VisibleField.Equals(value) != true)) {
                    this.VisibleField = value;
                    this.RaisePropertyChanged("Visible");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/WCF.Library")]
    public partial class Result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private WUAClient.DailyService.Status StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WUAClient.DailyService.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/WCF.Library")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotOk = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotAuthenticated = 50,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionAnswerDTO", Namespace="http://schemas.datacontract.org/2004/07/BLL.DTO")]
    public partial class QuestionAnswerDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid QuestionAnswerIdField;
        
        private System.Guid QuestionIdField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid QuestionAnswerId {
            get {
                return this.QuestionAnswerIdField;
            }
            set {
                if ((this.QuestionAnswerIdField.Equals(value) != true)) {
                    this.QuestionAnswerIdField = value;
                    this.RaisePropertyChanged("QuestionAnswerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DailyService.IDailyService")]
    public interface IDailyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/getAllQuestions", ReplyAction="http://tempuri.org/IDailyService/getAllQuestionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> getAllQuestionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/getQuestionById", ReplyAction="http://tempuri.org/IDailyService/getQuestionByIdResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.QuestionDTO> getQuestionByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/findQuestionByTitle", ReplyAction="http://tempuri.org/IDailyService/findQuestionByTitleResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> findQuestionByTitleAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/findQuestionByDescription", ReplyAction="http://tempuri.org/IDailyService/findQuestionByDescriptionResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> findQuestionByDescriptionAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/addQuestion", ReplyAction="http://tempuri.org/IDailyService/addQuestionResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> addQuestionAsync(WUAClient.DailyService.QuestionDTO question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/updateQuestion", ReplyAction="http://tempuri.org/IDailyService/updateQuestionResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> updateQuestionAsync(WUAClient.DailyService.QuestionDTO question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/deleteQuestion", ReplyAction="http://tempuri.org/IDailyService/deleteQuestionResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> deleteQuestionAsync(WUAClient.DailyService.QuestionDTO question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/getAllQuestionAnswers", ReplyAction="http://tempuri.org/IDailyService/getAllQuestionAnswersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> getAllQuestionAnswersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/getQuestionAnswerById", ReplyAction="http://tempuri.org/IDailyService/getQuestionAnswerByIdResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.QuestionAnswerDTO> getQuestionAnswerByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/findQuestionAnswerByTitle", ReplyAction="http://tempuri.org/IDailyService/findQuestionAnswerByTitleResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> findQuestionAnswerByTitleAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/findQuestionAnswersByQuestionId", ReplyAction="http://tempuri.org/IDailyService/findQuestionAnswersByQuestionIdResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> findQuestionAnswersByQuestionIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/addQuestionAnswer", ReplyAction="http://tempuri.org/IDailyService/addQuestionAnswerResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> addQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/updateQuestionAnswer", ReplyAction="http://tempuri.org/IDailyService/updateQuestionAnswerResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> updateQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDailyService/deleteQuestionAnswer", ReplyAction="http://tempuri.org/IDailyService/deleteQuestionAnswerResponse")]
        System.Threading.Tasks.Task<WUAClient.DailyService.Result> deleteQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDailyServiceChannel : WUAClient.DailyService.IDailyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DailyServiceClient : System.ServiceModel.ClientBase<WUAClient.DailyService.IDailyService>, WUAClient.DailyService.IDailyService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DailyServiceClient() : 
                base(DailyServiceClient.GetDefaultBinding(), DailyServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.basicHttp.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DailyServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DailyServiceClient.GetBindingForEndpoint(endpointConfiguration), DailyServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DailyServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DailyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DailyServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DailyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DailyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> getAllQuestionsAsync() {
            return base.Channel.getAllQuestionsAsync();
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.QuestionDTO> getQuestionByIdAsync(System.Guid id) {
            return base.Channel.getQuestionByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> findQuestionByTitleAsync(string query) {
            return base.Channel.findQuestionByTitleAsync(query);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionDTO>> findQuestionByDescriptionAsync(string query) {
            return base.Channel.findQuestionByDescriptionAsync(query);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> addQuestionAsync(WUAClient.DailyService.QuestionDTO question) {
            return base.Channel.addQuestionAsync(question);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> updateQuestionAsync(WUAClient.DailyService.QuestionDTO question) {
            return base.Channel.updateQuestionAsync(question);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> deleteQuestionAsync(WUAClient.DailyService.QuestionDTO question) {
            return base.Channel.deleteQuestionAsync(question);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> getAllQuestionAnswersAsync() {
            return base.Channel.getAllQuestionAnswersAsync();
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.QuestionAnswerDTO> getQuestionAnswerByIdAsync(System.Guid id) {
            return base.Channel.getQuestionAnswerByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> findQuestionAnswerByTitleAsync(string query) {
            return base.Channel.findQuestionAnswerByTitleAsync(query);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WUAClient.DailyService.QuestionAnswerDTO>> findQuestionAnswersByQuestionIdAsync(System.Guid id) {
            return base.Channel.findQuestionAnswersByQuestionIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> addQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question) {
            return base.Channel.addQuestionAnswerAsync(question);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> updateQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question) {
            return base.Channel.updateQuestionAnswerAsync(question);
        }
        
        public System.Threading.Tasks.Task<WUAClient.DailyService.Result> deleteQuestionAnswerAsync(WUAClient.DailyService.QuestionAnswerDTO question) {
            return base.Channel.deleteQuestionAnswerAsync(question);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.basicHttp)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.basicHttp)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:32595/DailyService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DailyServiceClient.GetBindingForEndpoint(EndpointConfiguration.basicHttp);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DailyServiceClient.GetEndpointAddress(EndpointConfiguration.basicHttp);
        }
        
        public enum EndpointConfiguration {
            
            basicHttp,
        }
    }
}
